outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
print (result)
}
rankHospital <- function(input,num){
sort(input)
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
print (result)
}
rankHospital <- function(input,num){
na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
print (result)
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
print (result["AK"])
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
data
states <- factor(data[,7])
states.levels
states
states.Levels
levels(states)
()
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
hospitals <- vector()
i <- 0
for(state in levels(states)){
hospital <- data[data$State == state & data[,outcomeNum] == result[i]]
hospitals <- c(hospitals, hospital)
i <- i + 1
}
print(cbind(hospitals, levels(states)))
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
hospitals <- vector()
i <- 0
for(state in levels(states)){
hospital <- data[data$State == state & data[,outcomeNum] == result[i],2]
hospitals <- c(hospitals, hospital)
i <- i + 1
}
print(cbind(hospitals, levels(states)))
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
hospitals <- vector()
i <- 1
for(state in levels(states)){
hospital <- data[data$State == state & data[,outcomeNum] == result[i],2]
hospitals <- c(hospitals, hospital)
i <- i + 1
}
print(cbind(hospitals, levels(states)))
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
rankAll("heart attack", 20)
states <- factor (data[,7])
levels(states)
rankAll <- function (outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeNum <- 0
if (outcome == "heart attack"){
outcomeNum <- 11
}else if (outcome == "heart failure"){
outcomeNum <- 17
}else if (outcome == "pneumonia"){
outcomeNum <- 23
}else(
stop("invalid outcome")
)
data[,outcomeNum] <- suppressWarnings(sapply(data[,outcomeNum], as.numeric))
states <- factor(data[,7])
result <- tapply(data[,outcomeNum], states, rankHospital, num,simplify = TRUE)
hospitals <- vector()
i <- 1
for(state in levels(states)){
hospital <- data[data$State == state & data[,outcomeNum] == result[i],2]
hospital <- sort(hospital)[1]
hospitals <- c(hospitals, hospital)
i <- i + 1
}
print(cbind(hospitals, levels(states)))
}
rankHospital <- function(input,num){
input <- na.omit(sort(input))
if (num == "best"){
input[1]
}else if (num == "worst"){
input[length(input)]
}else if (num < length(input)){
num <- as.numeric(num)
input[num]
}else{
return(NA)
}
}
levels(states)
rankAll("heart attack", 20)
tail(rankAll("pneumonia", "worst"),3)
tail(rankAll("heart failure"), 10)
library(reshape2)
head(mtcars)
mtcars
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
mtcars$carname <- rownames(mtcars)
mtcars
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
carMelt
cylData <- dcast(carMelt, cyl ~ variable)
cylData
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls
rm(list = ls())
ls
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -(r_arch:country))
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
cran
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran.package == "swirl")
filter(cran, pacakage == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran, country == "India", r_version <= 3.0.2)
filter(cran, country == "India", r_version <= "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linus-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran2, ip_id, package, size)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
mydf
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, male_1:female_2)
res <- gather(students2, sex_class, count, -grade)
res
?seperate()
?seperate
?seperate
?separate
seperate(res, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
submit()
submit()
submit()
submit()
submit()
submit()
submit()
info()
submit()
submit()
info()
submit()
submit()
submit()
submit()
submit()
submit()
info
info()
skip()
failed <- failed %>% mutate(status = "failed")
info
info()
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
swirl()
swirl
library(swirl)
swirl()
by()
bye9)
bye9)
info()
bye()
switl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd ("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("1920-01-2")
ymd("1920/01/2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- (with_tz(arrive, "Asia/Hong_Kon"))
arrive <- with_tz(arrive, "Asia/Hong_Kon")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interva(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
bye()
getwd()
